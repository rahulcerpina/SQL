SELECT : SELECT name, species FROM family_members;
SELECT specific columns: SELECT name, species FROM family_members;
WHERE...equals: SELECT * FROM family_members WHERE species = 'dog';
WHERE...greater than: SELECT * FROM family_members WHERE num_books_read >190;
WHERE...greater than or equal: SELECT * FROM family_members where num_books_read >= 180;
AND : SELECT * FROM friends_of_pickles WHERE height_cm < 45 AND species = 'dog';
OR : SELECT * FROM friends_of_pickles WHERE height_cm < 45 OR species = 'dog' ;
IN, NOT IN: SELECT *FROM friends_of_pickles WHERE species NOT IN ( 'cat' , 'dog' ) ;
DISTINCT: SELECT DISTINCT species FROM friends_of_pickles WHERE height_cm >50 ;
ORDER BY: SELECT * FROM friends_of_pickles ORDER BY height_cm DESC ; 
LIMIT # of returened rows: SELECT * FROM friends_of_pickles ORDER BY height_cm DESC LIMIT 1 ;
COUNT(*): SELECT COUNT(*) FROM friends_of_pickles;
COUNT(*) WHERE: SELECT COUNT(*) FROM friends_of_pickles WHERE species = 'dog' ;
SUM: SELECT SUM(num_books_read) FROM family_members ;
AVG: SELECT AVG(num_books_read) FROM family_members ;
MAX and MIN: SELECT MAX( num_books_read ) FROM family_members ;
GROUP BY: SELECT MAX(height_cm), species FROM friends_of_pickles GROUP BY species ;
NESTED QUERIES: SELECT * FROM family_members WHERE num_books_read = ( SELECT MAX (num_books_read) FROM family_members ) ;
NULL: SELECT * FROM family_members WHERE favorite_book IS NOT NULL ; 
Date: SELECT * FROM celebs_born WHERE birthdate > '1980-09-01' ;
INNER JOINS: SELECT character.name, character_actor.actor_name
             FROM character
             INNER JOIN character_actor
             ON character.id = character_actor.character_id;
MULTIPLE JOINS: SELECT character.name, actor.name
                FROM character
                INNER JOIN character_actor
                ON character.id = character_actor. character_id
                INNER JOIN actor
                ON character_actor.actor_id = actor.id;
Joins with WHERE: SELECT character.name, tv_show.name
                  FROM character
                  INNER JOIN character_tv_show ON character.id = character_tv_show.character_id
                  INNER JOIN tv_show ON character_tv_show.tv_show_id = tv_show.id
                  WHERE tv_show.name != 'How I Met Your Mother' 
                  AND character.name != 'Willow Rosenberg';
LEFT JOINS: SELECT character.name, actor.name
            FROM character
            LEFT JOIN character_actor
            ON character.id = character_actor.character_id
            LEFT JOIN actor
            ON character_actor.actor_id = actor.id ;
Column alias: SELECT character.name AS character, actor.name AS actor
              FROM character
              LEFT JOIN character_actor
	      ON character.id = character_actor.character_id
	      LEFT JOIN actor
	      ON character_actor.actor_id = actor.id;
Self Joins:  SELECT a1.name AS employee_name , a2.name AS boss_name
             FROM employees AS a1
             INNER JOIN employees AS a2
             ON a1.boss_id = a2.id ;
LIKE: SELECT * FROM robots WHERE name LIKE "%Robot 2___" AND (name LIKE '%Robot 20__' OR name LIKE '%Robot 209_');
CASE: SELECT *,CASE
        WHEN species = 'human' THEN 'talk'
        WHEN species = 'dog' THEN 'bark'
        ELSE 'meow'
        END AS sound
        FROM friends_of_pickles;
SUBSTR: SELECT * FROM robots WHERE SUBSTR(location,-2) LIKE '%NY';
COALESCE:SELECT name, COALESCE(tank, gun, sword) AS weapon FROM fighters;

